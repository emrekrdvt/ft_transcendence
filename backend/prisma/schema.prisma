generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

enum FriendshipStatus {
	PENDING
	ACCEPTED
	DECLINED
}


model User {
	id        Int      @default(autoincrement()) @id
	avatarUrl String?
	intraId   Int   @unique
	email     String   @unique
	username  String   @unique
	nickname  String?  @unique
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	isSigned  Boolean  @default(false)

	
	losses    Int      @default(0)
	wins     Int      @default(0)
	games	Int      @default(0)
	rating  Float      @default(1500)
	level	Int      @default(1)
	xp	Int      @default(0)
	xpToNextLevel Int @default(300)
	cash Float @default(0)

	achievements Achievement[]
	matches     Match[]
	sentRequests     Friendship[] @relation("sentRequests")
	receivedRequests Friendship[] @relation("receivedRequests")
	Friendship       Friendship[]
	friendIntraIds Int[]
	blockedFriends Int[]
	Message Message[]
	@@map("users")
}

model Achievement {
	id 	  Int      @default(autoincrement()) @id
	name  String

	isAchieved Boolean @default(false)
	progress   Int     @default(0)
	progressMax Int
	description String
	url		 String
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	userId Int
	user   User @relation(fields: [userId], references: [intraId])

	@@map("achievemets")
}

model Match {
	id        Int      @default(autoincrement()) @id
	player1   String
	player2   String
	player1Elo Int
	player2Elo Int
	player1EloChange Int
	player2EloChange Int
	player1AvatarUrl String
	player2AvatarUrl String
	player1Score Int
	player2Score Int
	endMessage String
	isWin     Boolean
	isDraw    Boolean @default(false)
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	userId Int
	user   User @relation(fields: [userId], references: [intraId])
	
	@@map("matches")
}

model Friendship {
	id        Int      @id @default(autoincrement())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	status FriendshipStatus

	requester   User @relation("sentRequests", fields: [requesterId], references: [intraId])
	requesterId Int

	requested   User  @relation("receivedRequests", fields: [requestedId], references: [intraId])
	requestedId Int
	User        User? @relation(fields: [userId], references: [id])
	userId      Int?

	@@unique([requesterId, requestedId])
	@@map("friendships")
}

model Message {
	id         Int      @id @default(autoincrement())
	text       String
	sender     User     @relation(fields: [senderId], references: [intraId])
	senderId   Int
	chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
	chatRoomId Int
}

model ChatRoom {
	id           Int       @id @default(autoincrement())
	name         String    @unique
	password     String?
	participants Int[]
	creator      Int[]
	moderator    Int[]
	messages     Message[]
	shutUp       Int[]
	createdAt    DateTime  @default(now())
	updatedAt    DateTime  @updatedAt
	privChat     Boolean   @default(false)
}

model BannedUsers {
	id          Int      @id @default(autoincrement())
	bannedUsers Int
	chatRoomId  String
	banEndTime  DateTime
}